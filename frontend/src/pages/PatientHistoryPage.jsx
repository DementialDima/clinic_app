import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from '../api/axios';
import AppHeader from '../components/Header';
import { getUserRole } from '../api/auth';

export default function PatientHistoryPage() {
    const { id: paramId } = useParams();
    const navigate = useNavigate();
    const user = JSON.parse(localStorage.getItem('user'));
    const token = localStorage.getItem('access');

    const id = paramId || user?.id;

    const [appointments, setAppointments] = useState([]);
    const [message, setMessage] = useState('');

    useEffect(() => {
        const role = getUserRole();
        if (role === 'PATIENT' && paramId) {
            // –ü–∞—Ü—ñ—î–Ω—Ç –Ω–µ –º–∞—î –¥–∏–≤–∏—Ç–∏—Å—å —á—É–∂—É —ñ—Å—Ç–æ—Ä—ñ—é
            navigate('/');
        } else {
            fetchAppointments();
        }
    }, [id]);

    const fetchAppointments = async () => {
        try {
            const response = await axios.get(`/api/appointments/?patient_id=${id}`);
            setAppointments(response.data);
        } catch (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—Ä–∏–π–æ–º—ñ–≤', err);
        }
    };

    const handleDownloadPDF = async () => {
        try {
            const response = await axios.get(`/api/patients/${id}/history/pdf/`, {
                responseType: 'blob',
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });

            const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/pdf' }));
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', `history_${id}.pdf`);
            document.body.appendChild(link);
            link.click();
            link.remove();
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PDF', error);
            setMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF');
        }
    };

    return (
        <>
            <AppHeader />
            <div style={{ padding: 20 }}>
                <h2>üìñ –Ü—Å—Ç–æ—Ä—ñ—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è –ø–∞—Ü—ñ—î–Ω—Ç–∞ #{id}</h2>

                <button onClick={handleDownloadPDF} style={{ marginBottom: 20 }}>
                    üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF
                </button>

                {message && <p style={{ color: 'red' }}>{message}</p>}

                {appointments.length === 0 ? (
                    <p>–ù–µ–º–∞—î –ø—Ä–∏–π–æ–º—ñ–≤.</p>
                ) : (
                    <ul style={{ paddingLeft: 0 }}>
                        {appointments.map((appt) => (
                            <li key={appt.id} style={{ marginBottom: 25, listStyle: 'none' }}>
                                <b>{new Date(appt.scheduled_time).toLocaleString()}</b> ‚Äî {appt.doctor?.first_name} {appt.doctor?.last_name}
                                <br />
                                <i>{appt.description}</i>

                                {appt.treatment ? (
                                    <details style={{ marginTop: 5 }}>
                                        <summary>ü©∫ –î–µ—Ç–∞–ª—ñ –ª—ñ–∫—É–≤–∞–Ω–Ω—è</summary>
                                        <p><strong>–î—ñ–∞–≥–Ω–æ–∑:</strong> {appt.treatment.diagnosis}</p>
                                        <p><strong>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞:</strong> {appt.treatment.procedure}</p>
                                        <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</strong> {appt.treatment.recommendations || '‚Äî'}</p>
                                    </details>
                                ) : (
                                    <p style={{ color: 'gray' }}>‚ùå –õ—ñ–∫—É–≤–∞–Ω–Ω—è —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ</p>
                                )}
                            </li>
                        ))}
                    </ul>
                )}
            </div>
        </>
    );
}
